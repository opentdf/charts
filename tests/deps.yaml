# Secret for PostgreSQL credentials
apiVersion: v1
kind: Secret
metadata:
  name: opentdf-db-credentials
  labels:
    app: postgresql
type: Opaque
data:
  password: cG9zdGdyZXM=
---
# ConfigMap for PostgreSQL configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: postgresql-config
  labels:
    app: postgresql
data:
  POSTGRES_DB: keycloak
  POSTGRES_USER: postgres
---
# Service for PostgreSQL
apiVersion: v1
kind: Service
metadata:
  name: platform-db
  labels:
    app: postgresql
spec:
  type: ClusterIP
  ports:
    - name: postgresql
      port: 5432
      targetPort: 5432
      protocol: TCP
  selector:
    app: postgresql
---
# Headless Service for PostgreSQL StatefulSet
apiVersion: v1
kind: Service
metadata:
  name: postgresql-headless
  labels:
    app: postgresql
spec:
  clusterIP: None
  ports:
    - name: postgresql
      port: 5432
      targetPort: 5432
      protocol: TCP
  selector:
    app: postgresql
---
# StatefulSet for PostgreSQL deployment
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgresql
  labels:
    app: postgresql
spec:
  serviceName: postgresql-headless
  replicas: 1
  selector:
    matchLabels:
      app: postgresql
  template:
    metadata:
      labels:
        app: postgresql
    spec:
      containers:
        - name: postgresql
          image: postgres:15
          imagePullPolicy: IfNotPresent
          env:
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: opentdf-db-credentials
                  key: password
            - name: POSTGRES_USER
              value: opentdf
            - name: POSTGRES_DB
              value: opentdf
            - name: PGDATA
              value: /var/lib/postgresql/data/pgdata
          ports:
            - name: postgresql
              containerPort: 5432
              protocol: TCP
          livenessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - exec pg_isready -U pguser
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          readinessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - exec pg_isready -U pguser
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          resources:
            requests:
              memory: "256Mi"
              cpu: "250m"
            limits:
              memory: "512Mi"
              cpu: "500m"
          volumeMounts:
            - name: postgresql-data
              mountPath: /var/lib/postgresql/data
      volumes:
        - name: postgresql-data
          emptyDir: {}
---
# ConfigMap for keycloak realm
apiVersion: v1
kind: ConfigMap
metadata:
  name: keycloak-realm
  labels:
    app: keycloak
data:
  example-realm.json: |
    {
      "realm": "opentdf",
      "enabled": true,
      "clients": []
    }
---
# Secret for Keycloak admin password
apiVersion: v1
kind: Secret
metadata:
  name: platform-keycloak
  labels:
    app: keycloak
type: Opaque
data:
  # Default password: admin (base64 encoded)
  admin-password: YWRtaW4=
---
# Service for Keycloak
apiVersion: v1
kind: Service
metadata:
  name: platform-keycloak
  labels:
    app: keycloak
spec:
  type: ClusterIP
  ports:
    - name: http
      port: 80
      protocol: TCP
      targetPort: http
    - name: https
      port: 443
      protocol: TCP
      targetPort: https
  selector:
    app: keycloak
---
# Headless Service for StatefulSet
apiVersion: v1
kind: Service
metadata:
  name: keycloak-headless
  labels:
    app: keycloak
spec:
  clusterIP: None
  ports:
    - name: http
      port: 8080
      targetPort: 8080
      protocol: TCP
  selector:
    app: keycloak
---
# StatefulSet for Keycloak deployment
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: keycloak
  labels:
    app: keycloak
spec:
  serviceName: keycloak-headless
  replicas: 1
  selector:
    matchLabels:
      app: keycloak
  template:
    metadata:
      labels:
        app: keycloak
    spec:
      containers:
        - name: keycloak
          image: quay.io/keycloak/keycloak:23.0
          imagePullPolicy: IfNotPresent
          args:
            - start-dev
            - --import-realm
          env:
            - name: KEYCLOAK_ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: platform-keycloak
                  key: admin-password
            - name: KEYCLOAK_ADMIN
              value: admin
            - name: KC_DB
              value: dev-file
            - name: KC_DB_URL_DATABASE
              value: /opt/keycloak/data/keycloak
            - name: KC_HEALTH_ENABLED
              value: "true"
            - name: KC_HOSTNAME
              value: keycloak.opentdf.local
            - name: KC_HOSTNAME_PORT
              value: "9443"
            - name: KC_PROXY_HEADERS
              value: xforwarded
            - name: KC_FEATURES
              value: preview,token-exchange
            - name: KC_HTTP_ENABLED
              value: "true"
            - name: KC_HOSTNAME_STRICT_HTTPS
              value: "true"
            - name: KC_PROXY
              value: edge
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /health/live
              port: 8080
            initialDelaySeconds: 120
            periodSeconds: 30
            timeoutSeconds: 5
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: /health/ready
              port: 8080
            initialDelaySeconds: 60
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3
          resources:
            requests:
              memory: "512Mi"
              cpu: "250m"
            limits:
              memory: "1Gi"
              cpu: "500m"
          volumeMounts:
            - name: keycloak-data
              mountPath: /opt/keycloak/data
            - name: keycloak-realm
              mountPath: /opt/keycloak/data/import
              readOnly: true
      volumes:
        - name: keycloak-data
          emptyDir: {}
        - name: keycloak-realm
          configMap:
            name: keycloak-realm

