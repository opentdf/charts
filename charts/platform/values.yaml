# Default values for chart.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# -- The number of Platform pods to run
replicaCount: 1

image:
  # -- The image repository to pull from
  repository: registry.opentdf.io/platform
  # -- The image tag to pull policy
  pullPolicy: IfNotPresent
  # -- Overrides the image tag whose default is the chart appVersion.
  tag: ""

# -- The image pull secrets to use
imagePullSecrets: []
# -- Overrides the chart name
nameOverride: ""
# -- Overrides the generated fullname
fullnameOverride: ""

serviceAccount:
  # -- Specifies whether a service account should be created
  create: true
  # -- Automatically mount a ServiceAccount's API credentials
  automount: true
  # -- Extra annotations to add to the service account
  annotations: {}
  # -- The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

# -- Extra annotations to add to the pod
podAnnotations: {}
# -- Extra labels to add to the pod
podLabels: {}

# -- The pod security context
podSecurityContext:
  {}
  # fsGroup: 2000

# -- The container security context
securityContext:
  {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  # -- The type of service to create
  type: ClusterIP
  # -- The port of the service
  port: 9000

ingress:
  # -- Enable Ingress
  enabled: false
  # -- Ingress class name if required
  className: ""
  # -- Extra Ingress annotations
  annotations:
    {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  # -- List of hosts for the ingress
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  # -- List of tls hosts
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

# -- Resources to allocate to the container
resources:
  {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

autoscaling:
  # -- Enable horizontal autoscaling
  enabled: false
  # -- Minimum number of pods to run
  minReplicas: 1
  # -- Maximum number of pods to run
  maxReplicas: 100
  # -- Target CPU utilization percentage
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

# -- Additional volumes on the output Deployment definition.
volumes: []
# - name: foo
#   secret:
#     secretName: mysecret
#     optional: false

# -- Additional volumeMounts on the output Deployment definition.
volumeMounts: []
# - name: foo
#   mountPath: "/etc/foo"
#   readOnly: true

# -- Target specific nodes in the cluster
nodeSelector: {}

# -- Tolerations to apply to the pod (https://kubernetes.io/docs/concepts/scheduling-eviction/taint-and-toleration/)
tolerations: []

# -- Affinity settings for pod assignment
affinity: {}

logger:
  # -- The platform log level ( debug, info, warn, error )
  level: info
  # -- The platform log format ( json, text )
  type: json
  # -- The platform log output
  output: stdout

db:
  # --  The database host
  host:
  # -- The database port
  port: 5432
  # -- The database name
  name: opentdf
  # -- The database user
  user: opentdf
  # -- The database ssl mode ( disable, prefer, require, verify-ca, verify-full )
  sslmode: prefer
  password:
    secret:
      # -- The kubernetes secret containing the database user password
      name: opentdf-db-credentials
      # -- The key in the secret containing the database user password
      key: password

server:
  # -- The server port
  port: 9000
  grpc:
    # -- Enables grpc reflection (https://github.com/grpc/grpc/blob/master/doc/server-reflection.md)
    reflectionEnabled: true
  tls:
    # -- Enables tls
    enabled: true
    # -- The server tls certificate. If not set, a self-signed certificate is generated
    secret:
  auth:
    # -- Audience of provided by the identity provider
    audience:
    # -- Identity provider issuer
    issuer:
    policy:
      ## -- Default policy for all requests
      default: #  "role:readonly"
      ## -- Dot notation is used to access nested claims (i.e. realm_access.roles)
      claim: #  realm_access.roles
      ## -- Maps the external role to the opentdf role
      ## Note: left side is used in the policy, right side is the external role
      map:
      #  readonly: opentdf-readonly
      #  admin: opentdf-admin
      #  org-admin: opentdf-org-admin

      ## -- Custom policy (see examples https://github.com/casbin/casbin/tree/master/examples)
      csv: #  |
      #  p, role:org-admin, policy:attributes, *, *, allow
      #  p, role:org-admin, policy:subject-mappings, *, *, allow
      #  p, role:org-admin, policy:resource-mappings, *, *, allow
      #  p, role:org-admin, policy:kas-registry, *, *, allow
  cryptoProvider:
    standard:
      rsa:
        key1:
          privateKeyPath: /etc/opentdf/kas/kas-private.pem
          publicKeyPath: /etc/opentdf/kas/kas-cert.pem
      ec:
        key1:
          privateKeyPath: /etc/opentdf/kas/kas-ec-private.pem
          publicKeyPath: /etc/opentdf/kas/kas-ec-cert.pem
services:
  kas:
    # -- KAS service enabled
    enabled: true
    # -- KAS secret containing keys
    # kas-private.pem , kas-cert.pem , kas-ec-private.pem , kas-ec-cert.pem
    privateKeysSecret: kas-private-keys
  authorization:
    # -- Authorization service enabled
    enabled: true
    # -- External entity store (currently only keycloak is supported)
    url:
    # -- Client id for the external entity store
    client: "tdf-entity-resolution"
    # -- Client secret for the external entity store
    secret:
    # -- Keycloak Realm
    realm: "opentdf"
    # -- Keycloak legacy mode??
    legacy: true
opa:
  # -- Whether to run an embedded OPA bundle. (!!! Do not enable this in production !!!)
  embedded: true
