{{ template "chart.header" . }}
{{ template "chart.deprecationWarning" . }}

{{ template "chart.badgesSection" . }}

{{ template "chart.description" . }}

> [!NOTE]
> Until a stable platform release is available, the current appVersion is set to `nightly`.

## Requirements

In order to run the platform you need a supported identity provider and postgres database. We have included the following charts as dependencies:

- [Keycloak](https://www.keycloak.org/guides)
  - [Helm Chart](https://artifacthub.io/packages/helm/bitnami/keycloak)

- [Postgres](https://www.postgresql.org/)
  - [Helm Chart](https://artifacthub.io/packages/helm/bitnami/postgresql)

If you want to deploy keycloak and postgresql as part of the platform deployment make sure to follow [Playground Configuration](#playground-configuration-optional) section.

## Pre-Requisites

### TLS Certificate

The chart will attempt to generate a TLS certificate if `tls.enabled` is set to `true` and no `tls.secretName` is provided.

Alternatively, you can also provide your own certificate as well. Once you have the certificate and key, you can create a TLS secret with the following command:

```bash
kubectl create secret tls <tls-secret-name> --cert <path-to-cert-file> --key <path-to-key-file>
```

### KAS Secret

In order to run the KAS server, you need to provide the KAS with a set a keys. This will allow the KAS to support nanotdf and tdf3 rewrap functionality.

#### Generate a set of KAS keys

```bash
openssl req -x509 -nodes -newkey RSA:2048 -subj "/CN=kas" -keyout kas-private.pem -out kas-cert.pem -days 365
openssl ecparam -name prime256v1 >ecparams.tmp
openssl req -x509 -nodes -newkey ec:ecparams.tmp -subj "/CN=kas" -keyout kas-ec-private.pem -out kas-ec-cert.pem -days 365
```

To create a secret with the keys, run the following command:

```bash
kubectl create secret generic kas-private-keys --from-file=./kas-cert.pem --from-file=./kas-ec-cert.pem --from-file=./kas-ec-private.pem --from-file=kas-private.pem
```

### HTTP/2 Support

The platform provides both gRPC and RESTful interfaces. Since gRPC requires HTTP/2 support, it's essential to configure your ingress with the appropriate annotations to handle this requirement.

Below are starting examples for configuring various ingress providers:

#### Openshift

Check to see if you have HTTP/2 enabled on your ingress routers
- https://docs.openshift.com/container-platform/4.15/networking/ingress-operator.html#nw-http2-haproxy_configuring-ingress


If no HTTP/2 support is enabled. You can still leverage gRPC by using a passthrough route.

Example values.yaml for passthrough route:
```yaml
ingress:
  enabled: true
  annotations:
    route.openshift.io/termination: "passthrough"
  hosts:
    - host: platform.apps.okd.example.com
      paths:
        - backend:
            name: platform
            port:
              number: 9000
          path: ""
          pathType: ImplementationSpecific
```

### Playground Configuration (Optional)

If you want to test the platform quickly without having to worry about setting up a database and identity provider, you can use the following configuration:

> [!WARNING]
> :warning: ** Keycloak might need to be configured differently depending on your environment setup. Use the linked charts to dig into other configuration options. 

```yaml
playground: true # Enable playground mode

# Configure keycloak ingress for access to keycloak
keycloak:
  ingress:
    annotations: {}
      # route.openshift.io/termination: edge
    hostname: # Your keycloak hostname (e.g. keycloak.example.com)
```


## Post Install

If everything is healthy you should be able to access the platform at the hostname you provided in the `ingress.hostname` field.

```sh
export PLATFORM_HOST=$(kubectl get ingress -l app.kubernetes.io/name=platform -o jsonpath='{.items[0].spec.rules[0].host}'  )  
grpcurl -insecure $PLATFORM_HOST:443 kas.AccessService/PublicKey
```

### Post Install with Playground enabled

Create a Keycloak Configuration File with the following content:

```yaml
baseUrl: &baseUrl http://localhost:8888
serverBaseUrl: &serverBaseUrl http://localhost:8080
customAudMapper: &customAudMapper
  name: audience-mapper
  protocol: openid-connect
  protocolMapper: oidc-audience-mapper
  config:
    included.custom.audience: *serverBaseUrl
    access.token.claim: "true"
    id.token.claim: "true"
realms:
  - realm_repepresentation:
      realm: opentdf
      enabled: true
    custom_realm_roles:
      - name: opentdf-org-admin
      - name: opentdf-admin
      - name: opentdf-readonly
    custom_client_roles:
      tdf-entity-resolution:
        - name: entity-resolution-test-role
    custom_groups:
      - name: mygroup
        attributes:
          mygroupattribute: 
            - mygroupvalue
    clients:
      - client:
          clientID: opentdf
          enabled: true
          name: opentdf
          serviceAccountsEnabled: true
          clientAuthenticatorType: client-secret
          secret: secret
          protocolMappers:
            - *customAudMapper
        sa_realm_roles: 
          - opentdf-org-admin
      - client:
          clientID: opentdf-sdk
          enabled: true
          name: opentdf-sdk
          serviceAccountsEnabled: true
          clientAuthenticatorType: client-secret
          secret: secret
          protocolMappers:
            - *customAudMapper
        sa_realm_roles: 
          - opentdf-readonly
      - client:
          clientID: tdf-entity-resolution
          enabled: true
          name: tdf-entity-resolution
          serviceAccountsEnabled: true
          clientAuthenticatorType: client-secret
          secret: secret
          protocolMappers:
            - *customAudMapper
        sa_client_roles:
          realm-management:
            - view-clients
            - query-clients
            - view-users
            - query-users
      - client:
          clientID: tdf-authorization-svc
          enabled: true
          name: tdf-authorization-svc
          serviceAccountsEnabled: true
          clientAuthenticatorType: client-secret
          secret: secret
          protocolMappers:
            - *customAudMapper
    users:
      - username: sample-user
        enabled: true
        firstName: sample
        lastName: user
        email: sampleuser@sample.com
        credentials:
          - value: testuser123
            type: password
        attributes:
          superhero_name: 
            - thor
          superhero_group: 
            - avengers
        groups:
          - mygroup
        realmRoles:
          - opentdf-org-admin
        clientRoles:
          realm-management:
            - view-clients
            - query-clients
            - view-users
            - query-users
          tdf-entity-resolution:
            - entity-resolution-test-role
    token_exchanges:
      - start_client: opentdf
        target_client: opentdf-sdk
 ```

 Run the following command to provision keycloak test data

  ```sh
    docker run \                                                                                                                                       ░▒▓ 127 ✘  system Node  at 13:22:53 
         -v ./kc-config.yaml:/home/nonroot/.opentdf/kc-config.yaml \
         -it registry.opentdf.io/platform:nightly provision keycloak-from-config -f /home/nonroot/.opentdf/kc-config.yaml -e https://kc-nightly.apps.dsp.shp.virtru.us -u admin -p keycloak123
  ```
{{ template "chart.homepageLine" . }}

{{ template "chart.maintainersSection" . }}

{{ template "chart.sourcesSection" . }}

{{ template "chart.requirementsSection" . }}

{{ template "chart.valuesSection" . }}