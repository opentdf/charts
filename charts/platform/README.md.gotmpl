{{ template "chart.header" . }}
{{ template "chart.deprecationWarning" . }}

{{ template "chart.badgesSection" . }}

{{ template "chart.description" . }}

## Requirements

In order to run the platform you need a supported identity provider and postgres database. Below are links if you need a place to start.

- [Keycloak](https://www.keycloak.org/guides)
  - https://artifacthub.io/packages/helm/codecentric/keycloak
  - https://artifacthub.io/packages/helm/bitnami/keycloak

- [Postgres](https://www.postgresql.org/)
  - https://artifacthub.io/packages/helm/bitnami/postgresql
  - https://artifacthub.io/packages/olm/community-operators/postgresql

## Pre-Requisites

### Configuring the Identity Provider

TBD...

### TLS Certificate

The chart will attempt to generate a TLS certificate if `tls.enabled` is set to `true` and no `tls.secretName` is provided.

Alternatively, you can also provide your own certificate as well. Once you have the certificate and key, you can create a TLS secret with the following command:

```bash
kubectl create secret tls <tls-secret-name> --cert <path-to-cert-file> --key <path-to-key-file>
```

### KAS Secret

In order to run the KAS server, you need to provide the KAS with a set a keys. This will allow the KAS to support nanotdf and tdf3 rewrap functionality.

#### Generate a set of KAS keys

```bash
openssl req -x509 -nodes -newkey RSA:2048 -subj "/CN=kas" -keyout kas-private.pem -out kas-cert.pem -days 365
openssl ecparam -name prime256v1 >ecparams.tmp
openssl req -x509 -nodes -newkey ec:ecparams.tmp -subj "/CN=kas" -keyout kas-ec-private.pem -out kas-ec-cert.pem -days 365
```

To create a secret with the keys, run the following command:

```bash
kubectl create secret generic kas-private-keys --from-file=./kas-cert.pem --from-file=./kas-ec-cert.pem --from-file=./kas-ec-private.pem --from-file=kas-private.pem
```

### HTTP/2 Support

The platform exposes a gRPC and Restful interface. gRPC requires HTTP/2 support so you will need to ensure providing the proper ingress annotations. 
Below is the start of examples for different ingress providers.

#### Openshift

Check to see if you have HTTP/2 enabled on your ingress routers
- https://docs.openshift.com/container-platform/4.15/networking/ingress-operator.html#nw-http2-haproxy_configuring-ingress

TBD

If no HTTP/2 support is enabled. You can still leverage gRPC by using a passthrough route.

Example values.yaml for passthrough route:
```yaml
ingress:
  enabled: true
  annotations:
    route.openshift.io/termination: "passthrough"
  hosts:
    - host: platform.apps.okd.example.com
      paths:
        - backend:
            name: platform
            port:
              number: 9000
          path: ""
          pathType: ImplementationSpecific
```

{{ template "chart.homepageLine" . }}

{{ template "chart.maintainersSection" . }}

{{ template "chart.sourcesSection" . }}

{{ template "chart.requirementsSection" . }}

{{ template "chart.valuesSection" . }}