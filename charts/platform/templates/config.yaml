{{ $data := dict "Release" $.Release "Chart" $.Chart "Values" $.Values "Files" $.Files "Capabilities" .Capabilities }}
{{ include "sdk_config.validate" . }}
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "chart.fullname" . }}
  labels:
    {{- include "chart.labels" . | nindent 4 }}
data:
 {{ include "platform.configFileName" . }}: |
    dev_mode: {{ .Values.playground }}
    logger: 
      {{- .Values.logger | toYaml | nindent 6 }}
    {{- if .Values.db.required }}
    db:
      {{- omit .Values.db "password" | toYaml | nindent 6 }}
      password:
    {{- end }}
    mode: {{ .Values.mode | quote }}
    {{- if .Values.sdk_config.client_id }}
    sdk_config:
      {{- /* Loop through each key-value pair in the connections map */}}
      {{- if .Values.sdk_config.connections }}
        {{- range $name, $config := .Values.sdk_config.connections }}
          {{- /* Check if the 'endpoint' key exists within the connection's config and is not empty */}}
          {{- if and (hasKey $config "endpoint") (ne (trim $config.endpoint) "") }}
            {{- /* Output the connection name (key) with indent 4 */}}
            {{- $name | nindent 6 }}:
              {{- /* Output the connection's config (value) as YAML, indented by 6 spaces */}}
              {{- $config | toYaml | nindent 8 }}
          {{- end }} {{- /* End of the 'if endpoint exists' check */}}
        {{- end }} {{- /* End of the range loop */}}
      {{- end }}
      client_id: {{ .Values.sdk_config.client_id | quote }}
      {{- if .Values.sdk_config.client_secret }}
      client_secret: {{ .Values.sdk_config.client_secret | quote }}
      {{- end }}
      {{- end }}
    server:
      port: {{ .Values.server.port | quote }}
      enable_pprof: {{ .Values.server.enable_pprof }}
      cors:
        enabled: {{ .Values.server.cors.enabled }}
        allowedorigins:
          {{- toYaml .Values.server.cors.allowedorigins | nindent 10 }}
        allowedmethods:
          {{- toYaml .Values.server.cors.allowedmethods | nindent 10 }}
        allowedheaders:
          {{- toYaml .Values.server.cors.allowedheaders | nindent 10 }}
        exposedheaders:
          {{- toYaml .Values.server.cors.exposedheaders | nindent 10 }}
        maxage: {{ .Values.server.cors.maxage }}
        allowcredentials: {{ .Values.server.cors.allowcredentials }}
      grpc:
        reflectionEnabled: {{ .Values.server.grpc.reflectionEnabled | quote }} # Default is false
      tls:
        enabled: {{ .Values.server.tls.enabled | quote }}
        cert: /etc/platform/certs/tls.crt
        key: /etc/platform/certs/tls.key
      auth:
        enabled: true
        {{- .Values.server.auth | toYaml | nindent 8 }}
      cryptoProvider:
        {{- .Values.server.cryptoProvider | toYaml | nindent 8 }}
    {{-  include "platform.util.merge.dict" (list $data .Values.configTemplate "platform.configuration.tpl" ) | nindent 4}}